// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String    @unique @db.VarChar(255)
  passwordHash   String    @map("password_hash") @db.VarChar(255)
  name           String    @db.VarChar(255)
  phone          String?   @db.VarChar(20)
  country        String?   @db.VarChar(100)
  city           String?   @db.VarChar(100)
  dateOfBirth    DateTime? @map("date_of_birth") @db.Date
  occupation     String?   @db.VarChar(255)
  education      String?   @db.VarChar(255)
  interests      String?   @db.Text
  role           Role      @default(USER)
  emailVerified  Boolean   @default(false) @map("email_verified")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  articles              Article[]
  memberships           Membership[]
  membershipApplications MembershipApplication[]
  reviewedApplications   MembershipApplication[] @relation("ReviewedBy")

  @@map("users")
}

model Branch {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String    @db.VarChar(255)
  country         String    @db.VarChar(100)
  city            String    @db.VarChar(100)
  address         String?   @db.Text
  contactEmail    String?   @map("contact_email") @db.VarChar(255)
  contactPhone    String?   @map("contact_phone") @db.VarChar(20)
  description     String?   @db.Text
  establishedDate DateTime? @map("established_date") @db.Date
  status          BranchStatus @default(ACTIVE)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("branches")
}

model Ideology {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String          @db.VarChar(255)
  description String          @db.Text
  category    String?         @db.VarChar(100)
  priority    Int             @default(0)
  status      IdeologyStatus  @default(ACTIVE)
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("ideologies")
}

model Event {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String      @db.VarChar(255)
  description          String      @db.Text
  eventDate            DateTime    @map("event_date") @db.Timestamptz(6)
  endDate              DateTime?   @map("end_date") @db.Timestamptz(6)
  location             String?     @db.VarChar(255)
  eventType            EventType   @default(GENERAL) @map("event_type")
  maxAttendees         Int?        @map("max_attendees")
  registrationRequired Boolean     @default(false) @map("registration_required")
  status               EventStatus @default(UPCOMING)
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("events")
}

model Article {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String        @db.VarChar(255)
  content       String        @db.Text
  excerpt       String?       @db.Text
  authorId      String?       @map("author_id") @db.Uuid
  category      String?       @db.VarChar(100)
  tags          String[]
  featuredImage String?       @map("featured_image") @db.VarChar(500)
  status        ArticleStatus @default(DRAFT)
  publishedAt   DateTime?     @map("published_at") @db.Timestamptz(6)
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  author User? @relation(fields: [authorId], references: [id], onDelete: SetNull)

  @@map("articles")
}

model Membership {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String           @map("user_id") @db.Uuid
  membershipType   MembershipType   @default(STANDARD) @map("membership_type")
  status           MembershipStatus @default(PENDING)
  applicationDate  DateTime         @default(now()) @map("application_date") @db.Timestamptz(6)
  approvalDate     DateTime?        @map("approval_date") @db.Timestamptz(6)
  expiryDate       DateTime?        @map("expiry_date") @db.Timestamptz(6)
  membershipNumber String?          @unique @map("membership_number") @db.VarChar(50)
  applicationId    String?          @map("application_id") @db.Uuid
  notes            String?          @db.Text
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  application MembershipApplication? @relation(fields: [applicationId], references: [id])

  @@map("memberships")
}

model MembershipApplication {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                  String                    @map("user_id") @db.Uuid
  fullName                String                    @map("full_name") @db.VarChar(255)
  phoneNumber             String                    @map("phone_number") @db.VarChar(20)
  dateOfBirth             DateTime                  @map("date_of_birth") @db.Date
  gender                  String                    @db.VarChar(20)
  streetAddress           String                    @map("street_address") @db.Text
  city                    String                    @db.VarChar(100)
  region                  String                    @db.VarChar(100)
  postalCode              String                    @map("postal_code") @db.VarChar(20)
  country                 String                    @db.VarChar(100)
  profession              String                    @db.VarChar(255)
  education               String                    @db.VarChar(255)
  languagesSpoken         String                    @map("languages_spoken") @db.Text
  professionalExperience  String                    @map("professional_experience") @db.Text
  keySkills               String                    @map("key_skills") @db.Text
  emergencyContactName    String                    @map("emergency_contact_name") @db.VarChar(255)
  emergencyContactPhone   String                    @map("emergency_contact_phone") @db.VarChar(20)
  politicalExperience     String                    @map("political_experience") @db.Text
  leadershipRoles         String                    @map("leadership_roles") @db.Text
  communityInvolvement    String                    @map("community_involvement") @db.Text
  motivation              String                    @db.Text
  expectations            String                    @db.Text
  volunteerStatus         Boolean                   @map("volunteer_status")
  applicationStatus       ApplicationStatus         @default(PENDING) @map("application_status")
  reviewedBy              String?                   @map("reviewed_by") @db.Uuid
  reviewedAt              DateTime?                 @map("reviewed_at") @db.Timestamptz(6)
  createdAt               DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer   User?        @relation("ReviewedBy", fields: [reviewedBy], references: [id])
  membership Membership[]

  @@map("membership_applications")
}

// Enums
enum Role {
  USER  @map("user")
  ADMIN @map("admin")
}

enum BranchStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

enum IdeologyStatus {
  ACTIVE   @map("active")
  DRAFT    @map("draft")
  ARCHIVED @map("archived")
}

enum EventType {
  CONFERENCE @map("conference")
  MEETING    @map("meeting")
  RALLY      @map("rally")
  WORKSHOP   @map("workshop")
  GENERAL    @map("general")
}

enum EventStatus {
  UPCOMING  @map("upcoming")
  ONGOING   @map("ongoing")
  COMPLETED @map("completed")
  CANCELLED @map("cancelled")
}

enum ArticleStatus {
  DRAFT     @map("draft")
  PUBLISHED @map("published")
  ARCHIVED  @map("archived")
}

enum MembershipType {
  STANDARD @map("standard")
  PREMIUM  @map("premium")
  LIFETIME @map("lifetime")
}

enum MembershipStatus {
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")
  EXPIRED  @map("expired")
}

enum ApplicationStatus {
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")
  UNDER_REVIEW @map("under_review")
}
